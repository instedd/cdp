- content_for(:subheader) do
  .row.center.edit
    .col.pe-10
      .row
        .col
          %h2
            = link_to samples_reports_path, class: "side-link", title: "Back" do
              = image_tag "arrow-left.png"
            = @samples_report.name

.row
  .col
    .row
      .col.pe-4
        .samples-report
          .report-summary-content
            .title
              Summary
            .subtitle
              Samples
            .text
              = @samples_report.samples_report_samples.length
              -if @samples_without_results_count > 0
                (#{@samples_without_results_count} without results)
            .subtitle
              Box Purpose
            .text
              = @purpose
            -if @purpose == "LOD"
              .subtitle
                Limit of blank
              .text
                = @samples_report.lob
              .subtitle
                Limit of Detection
              .text
                = @samples_report.lod
            -if @purpose == "Challenge"
              .subtitle
                Computed ROC AUC
              .text{id: "computed-auc"}
                = auc(roc_curve(@samples_report))
              .subtitle
                Threshold's TPR
              .text{id: "computed-tpr"}
              .subtitle
                Threshold's FPR
              .text{id: "computed-fpr"}
            .separation

            .action
              = link_to "", :onclick => "downloadCharts()", id: "download-svg" do
                .subtitle
                  = icon_tag "barchart", class: "btn-icon icon-text-color"
                  Download charts as svg
            .action
              =button_tag id:'print-pdf', class: 'subtitle btn-transparent' do
                = icon_tag "as-pdf", class: "btn-icon icon-text-color"
                Download PDF
            .action
              =button_tag id:'print-as-csv', class: 'subtitle btn-transparent' do
                = icon_tag "table", class: "btn-icon icon-text-color"
                Download NIH files

        - if @can_delete
          .report-summary-after
            =link_to delete_samples_report_path, id: @samples_report.id, data: { method: "delete", confirm: "You're about to permanently delete this report. This action CANNOT be undone. Are you sure you want to proceed?" } do
              .subtitle
                = icon_tag "trash", class: "btn-icon icon-text-color"
                Delete Report

      .col
        .samples-report.hidden{id:'samples-report'}
          .report-content
            - if @purpose == "Challenge"
              .title{id: "treshold-title"}
              .slider
                .min-signal
                  0.00
                .progress
                %input{type:"range", id:"threshold", class: "slider", onchange:"updateThreshold()", min:0, max:@max_signal, step:@max_signal/100, value:0}
                .max-signal
                  #{@max_signal.round(2)}
              .separation
            - if @purpose == "LOD" || @purpose == "Variants"
              %input{type:"hidden", id:"threshold", value: 0.0}
            .title
              Confusion Matrix
            .separation
              %div#confusion-matrix
                = render 'confusion_matrix'
            .separation
            .title
              Measured signal
            = react_component('SamplesReportsBarChart',
                        data: @reports_data,
                        height: 300,
                        barVariable: "average",
                        errorBarsVariable: "errors",
                        y_label: 'MEASURED SIGNAL',
                        x_labels: @purpose == "Challenge" ? ["Virus", "Distractor"]:[])

            - if @purpose == "LOD"
              .separation
              .title
                Limit of detection
              = react_component('SamplesReportsLineChart',
                          data: @reports_data,
                          height: 300,
                          dotsVariable: "measurements",
                          y_label: 'MEASURED SIGNAL',
                          x_labels: [])

            - if @purpose == "Challenge"
              .separation
              .title
                ROC Curve
              = react_component('SamplesReportsRocChart',
                data: roc_curve(@samples_report))

.nih-report-type-modal-container.hidden
  = react_component("ConfirmationModal",
                      deletion: false,
                      cancelFunction: "hideConfirmModal",
                      confirmFunction: "downloadNIHFiles",
                      id: "nih-report-type-modal",
                      colorClass: "black",
                      confirmMessage: "Continue",
                      title: "Notice",
                      showCloseButton: false,
                      message: "After downloading these files, you will need to fill specific columns. <br />Make sure you read the instructions to be aware of these considerations <br>contained in the file called Instructions.txt")

= form_tag print_samples_reports_path, method: "post", id: "print-pdf-form", target: "_blank" do
  %input{type: "hidden", name: "context", id: "print-pdf-context", value: params[:context]}
  %input{type: "hidden", name: "samples_report_id", id: "print-pdf-samples-report-id", value: @samples_report.id}
  %input{type: "hidden", name: "measured_signal_svg", id: "print-pdf-measured-signal-svg"}
  %input{type: "hidden", name: "specific_svg", id: "print-pdf-specific-svg"}
  - if @purpose == "Challenge"
    %input{type: "hidden", name: "threshold", id: "print-pdf-threshold"}
    %input{type: "hidden", name: "auc", id: "print-pdf-auc"}
    %input{type: "hidden", name: "threshold_tpr", id: "print-pdf-tpr"}
    %input{type: "hidden", name: "threshold_fpr", id: "print-pdf-fpr"}
  
:javascript

  function applyInline(element, recursive = true) {
    if (!element) {
      throw new Error("No element specified.");
    }

    const matches = matchRules(element);

    // we need to preserve any pre-existing inline styles.
    var srcRules = document.createElement(element.tagName).style;
    srcRules.cssText = element.style.cssText;

    matches.forEach(rule => {
      for (var prop of rule.style) {
        let val = srcRules.getPropertyValue(prop) || rule.style.getPropertyValue(prop);
        let priority = rule.style.getPropertyPriority(prop);

        element.style.setProperty(prop,val,priority);
      }
    });

    if (recursive) {
      for (let item of element.children) {
          applyInline(item, recursive)
      }
    }
  }

  function matchRules(el, sheets) {
    sheets = sheets || document.styleSheets;
    var ret = [];

    for (var i in sheets) {
      if (sheets.hasOwnProperty(i)) {
        var rules = sheets[i].rules || sheets[i].cssRules;
        for (var r in rules) {
          if (el.matches(rules[r].selectorText)) {
            ret.push(rules[r]);
          }
        }
      }
    }
    return ret;
  }

  function downloadSvg(chartId, chartName) {
    var svgData = document.getElementById(chartId);
    applyInline(svgData);
    svgData = svgData.outerHTML;
    var svgBlob = new Blob([svgData], {type:"image/svg+xml;charset=utf-8"});
    var svgUrl = URL.createObjectURL(svgBlob);
    var downloadLink = document.createElement("a");
    downloadLink.href = svgUrl;
    downloadLink.download = `#{@samples_report.name}_${chartName}.svg`;
    document.body.appendChild(downloadLink);
    downloadLink.click();
    document.body.removeChild(downloadLink);
  }

  function downloadCharts(){
    downloadSvg("barchart", "measured_signal");
    if ("#{@purpose}" == "Challenge")
      downloadSvg("rocchart", "roc_curve");
    else
      downloadSvg("linechart", "limit_of_detection");
  }

  var getUrlParameter = function getUrlParameter(sParam) {
      var sPageURL = window.location.search.substring(1),
          sURLVariables = sPageURL.split('&'),
          sParameterName,
          i;

      for (i = 0; i < sURLVariables.length; i++) {
          sParameterName = sURLVariables[i].split('=');

          if (sParameterName[0] === sParam) {
              return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
          }
      }
      return false;
  };

  async function updateThreshold(){
    var threshold = document.getElementById("threshold").value;

    var context = getUrlParameter('context');
    var url = '/samples_reports/update_threshold?context='+context+"&samples_report_id="+#{@samples_report.id}+"&threshold="+threshold;
    var ret = await fetch(url)
        .then((response) => response.json())
        .then((r) => {
            return r;
    })

    if ("#{@purpose}" == "Challenge") {
      var minthreshold = document.getElementById("threshold").min;
      var maxthreshold = document.getElementById("threshold").max;

      document.getElementById("treshold-title").innerHTML = "Threshold: " + parseFloat(ret.threshold).toFixed(2);

      // For the bar chart
      var threshold_percentage = (threshold - minthreshold) / (maxthreshold - minthreshold);
      var svg_mintreshold = parseFloat(d3.select("#threshold-line-down").attr("y1"));
      var svg_maxtreshold = parseFloat(d3.select("#threshold-line-up").attr("y1"));
      var svg_pergentage = svg_mintreshold + (svg_maxtreshold - svg_mintreshold) * threshold_percentage;
      d3.select("#threshold-line").attr("y1", svg_pergentage);
      d3.select("#threshold-line").attr("y2", svg_pergentage);

      // For the ROC curve
      var fpr = (ret.confusion_matrix.false_positive || 0) / ((ret.confusion_matrix.false_positive || 0) + (ret.confusion_matrix.true_negative || 0));
      var svg_minfpr = parseFloat(d3.select("#threshold-fpr-down").attr("x1"));
      var svg_maxfpr = parseFloat(d3.select("#threshold-fpr-up").attr("x1"));
      var fpr_pergentage = svg_minfpr + (svg_maxfpr - svg_minfpr) * fpr;
      d3.select("#threshold-fpr").attr("x1", fpr_pergentage);
      d3.select("#threshold-fpr").attr("x2", fpr_pergentage);

      var tpr = (ret.confusion_matrix.true_positive || 0)/ ((ret.confusion_matrix.true_positive || 0)+ (ret.confusion_matrix.false_negative || 0));
      var svg_mintpr = parseFloat(d3.select("#threshold-tpr-down").attr("y1"));
      var svg_maxtpr = parseFloat(d3.select("#threshold-tpr-up").attr("y1"));
      var svg_pergentage = svg_mintpr + (svg_maxtpr - svg_mintpr) * tpr;
      d3.select("#threshold-tpr").attr("y1", svg_pergentage);
      d3.select("#threshold-tpr").attr("y2", svg_pergentage);

      document.getElementById("computed-fpr").innerHTML =  fpr.toFixed(2);
      document.getElementById("computed-tpr").innerHTML =  tpr.toFixed(2);
    }
    else {
      d3.select("#threshold-line").style("display", "none")
    }

    document.getElementById("true_negative").innerHTML =  ret.confusion_matrix.true_negative || 0;
    document.getElementById("true_positive").innerHTML =  ret.confusion_matrix.true_positive || 0;
    document.getElementById("false_negative").innerHTML =  ret.confusion_matrix.false_negative || 0;
    document.getElementById("false_positive").innerHTML =  ret.confusion_matrix.false_positive || 0;
    document.getElementById("predicted_negative").innerHTML =  ret.confusion_matrix.predicted_negative || 0;
    document.getElementById("predicted_positive").innerHTML =  ret.confusion_matrix.predicted_positive || 0;
    document.getElementById("actual_negative").innerHTML =  ret.confusion_matrix.actual_negative || 0;
    document.getElementById("actual_positive").innerHTML =  ret.confusion_matrix.actual_positive || 0;
    document.getElementById("total").innerHTML =  ret.confusion_matrix.total || 0;

  }

  {
    updateThreshold().then(() => {
      document.getElementById("samples-report").classList.remove("hidden");
    });
  }

  // For NIH download button

  function showConfirmModal() {
    document.querySelector(`.nih-report-type-modal-container`).classList.remove("hidden");
  }

  function hideConfirmModal() {
    document.querySelector(`.nih-report-type-modal-container`).classList.add("hidden");
  }

  async function downloadNIHFiles() {
    hideConfirmModal();
    var context = getUrlParameter('context');
    
    // if purpose is challenge, then we need the live threshold calculations
    if (#{@purpose.to_json} == "Challenge") {
      var threshold = document.getElementById("threshold").value;
      var url = '/samples_reports/update_threshold?context='+context+"&samples_report_id=#{@samples_report.id}&threshold="+threshold;
      await fetch(url)
          .then((response) => response.json())
          .then((ret) => {
            var params = {
              true_positives: ret.confusion_matrix.true_positive || 0,
              true_negatives: ret.confusion_matrix.true_negative || 0,
              false_positives: ret.confusion_matrix.false_positive || 0,
              false_negatives: ret.confusion_matrix.false_negative || 0,
              tpr: (ret.confusion_matrix.true_positive || 0) / ((ret.confusion_matrix.true_positive || 0) + (ret.confusion_matrix.false_negative || 0)),
              fpr: (ret.confusion_matrix.false_positive || 0) / ((ret.confusion_matrix.false_positive || 0) + (ret.confusion_matrix.true_negative || 0)),
              auc: #{auc(roc_curve(@samples_report))},
              roc_x_values: #{roc_curve(@samples_report).map{|x| x[0]}},
              roc_y_values: #{roc_curve(@samples_report).map{|x| x[1]}},
            };

            // create url params with the params dictionary
            var urlParams = new URLSearchParams(Object.entries(params));

            // Open the download_nih_tables path in a new tab
            var url = '/samples_reports/'+#{@samples_report.id}+'/nih_tables?context='+context+"&"+urlParams.toString();
            window.open(url, '_blank');
        })
    }
    else {
      var url = '/samples_reports/'+#{@samples_report.id}+'/nih_tables?context='+context;
      window.open(url, '_blank');
    }
  }

  function getSvg(chartId, chartName){
    var svgData = document.getElementById(chartId);
    applyInline(svgData);
    svgData = svgData.outerHTML;
    return svgData;
  }

  function printPDF() {
    document.getElementById("print-pdf-samples-report-id").value = #{@samples_report.id};
    document.getElementById("print-pdf-measured-signal-svg").value = getSvg("barchart", "measured_signal");
    if ("#{@purpose}" == "Challenge")
      document.getElementById("print-pdf-specific-svg").value = getSvg("rocchart", "roc_curve");
    else
      document.getElementById("print-pdf-specific-svg").value = getSvg("linechart", "limit_of_detection");

    if (#{@purpose.to_json} == "Challenge") {
      document.getElementById("print-pdf-threshold").value = document.getElementById("threshold").value;
      document.getElementById("print-pdf-tpr").value = document.getElementById("computed-tpr").innerHTML;
      document.getElementById("print-pdf-fpr").value = document.getElementById("computed-fpr").innerHTML;
      document.getElementById("print-pdf-auc").value = document.getElementById("computed-auc").innerHTML;
    }

    document.getElementById('print-pdf-form').submit();
  }

  document.getElementById("print-as-csv").addEventListener("click", showConfirmModal);
  document.getElementById("print-pdf").addEventListener("click", printPDF);

