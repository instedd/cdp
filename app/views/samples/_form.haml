= cdx_form_for(@sample_form) do |f|
  .row
    .col
      - unless f.object.qc_info.nil?
        = f.form_field :quality_control do
          = link_to edit_qc_info_path(f.object.qc_info.id, sample_id: f.object.id), class: 'centered' do
            = icon_tag "text", class: "icon-blue"
            = "VIEW QC INFO"

      = f.form_field :uuid do
        %span.copy-content
          = f.object.uuid
        %button.btn-copy.ttip
          = icon_tag "copy", class: "btn-icon"

      = f.form_field :reference_gene do
        = react_component "CdxSelectAutocomplete", { name: "sample[reference_gene]", value: f.object.reference_gene, url: institution_autocomplete_path(institution_id: @navigation_context.institution.id, field_name: "reference_gene") }
      = f.form_field :target_organism_taxonomy do
        = react_component "CdxSelectAutocomplete", { name: "sample[target_organism_taxonomy_id]", value: f.object.target_organism_taxonomy_id, url: institution_autocomplete_path(institution_id: @navigation_context.institution.id, field_name: "target_organism_taxonomy_id") }
      = f.form_field :pango_lineage do
        = react_component "CdxSelectAutocomplete", { name: "sample[pango_lineage]", value: f.object.pango_lineage, url: institution_autocomplete_path(institution_id: @navigation_context.institution.id, field_name: "pango_lineage") }
      = f.form_field :who_label do
        = react_component "CdxSelectAutocomplete", { name: "sample[who_label]", value: f.object.who_label, url: institution_autocomplete_path(institution_id: @navigation_context.institution.id, field_name: "who_label") }

      - if f.object.batch_number
        = f.form_field :batch_id, value: @sample_form.batch_number

      - if box = @sample_form.box
        = f.fields_for :box, box do |g|
          = g.form_field :uuid, label: { text: "Box ID" } do
            %span.copy-content
              = g.object.uuid
            %button.btn-copy.ttip
              = icon_tag "copy", class: "btn-icon"
          = g.form_field :purpose, value: box.purpose, label: { text: "Box Purpose" }

    .col.pe-5
      - if @show_barcode_preview
        = render "barcode_card"

  .row
    .col
      = f.form_field :date_produced do
        = f.date_field :date_produced, readonly: !@can_update

      = f.form_field :lab_technician do
        = f.text_field :lab_technician, :class => 'input-x-large', readonly: !@can_update

      = f.form_field :specimen_role do
        - if @can_update
          = cdx_select form: f, name: :specimen_role, searchable: true, :class => 'input-x-large' do |select|
            - select.items Sample.specimen_roles, :id, :description
        - else
          = text_field_tag :specimen_role, Sample.specimen_role_description(f.object.specimen_role), { :class => 'input-x-large', readonly: true }

      = f.form_field :virus_lineage do
        - @sample_form.blinded_attribute(:virus_lineage) do
          = f.text_field :virus_lineage, class: 'input-x-large', readonly: !@can_update

      = f.form_field :isolate_name do
        - @sample_form.blinded_attribute(:isolate_name) do
          = f.text_field :isolate_name, class: 'input-x-large', readonly: !@can_update

      = f.form_field :inactivation_method do
        - if @can_update
          = cdx_select form: f, name: :inactivation_method, searchable: false do |select|
            - select.items Sample.inactivation_methods
        - else
          = f.text_field :inactivation_method, readonly: true

      = f.form_field :volume do
        .row.input-unit
          = f.number_field :volume, min: 0, step: :any, :class => "input-small", readonly: !@can_update
          .span.unit (μl)

      = f.form_field :concentration do
        - @sample_form.blinded_attribute(:concentration) do
          .row.input-unit
            = f.text_field :concentration, min:0, readonly: !@can_update, :class=> "input-medium", :value => humanize_concentration(@sample_form.concentration), :pattern => "[\\d.]+(?:[eE]\\+?\\d+)?", :title => "(examples: 120, 12e1, 1.2e2, 1.2e+2, 1.2E2, 1.2E+2, 1.2E+02)"
            .span.unit (copies/ml)

      = f.form_field :replicate do
        - @sample_form.blinded_attribute(:replicate) do
          = f.number_field :replicate, min: 0, step: 1, class: "input-small", readonly: !@can_update

      = f.form_field :media do
        - if @can_update
          = cdx_select form: f, name: :media, searchable: false do |select|
            - select.item "", " "
            - select.items Sample.media
        - else
          = f.text_field :media, readonly: true

      .row.form-field
        .col.form-field__label
          %label Distractor
        .col
          = f.check_box :distractor
          = f.label :distractor, "When enabled, the system will consider that the sample test result should be negative regardless of its concentration and threshold", class: "faded"

      = f.form_field :instruction do
        = f.text_field :instruction

      - if @sample_form.measured_signal
        = f.form_field :measured_signal do
          = f.text_field :measured_signal, readonly: true

  .col
    = render (@can_update ? 'form_assays' : 'show_assays'), f: f

  .col
    = render (@can_update ? 'form_notes' : 'show_notes'), f: f

  - if @can_update
    = f.form_actions do
      = f.submit 'Save', class: 'btn-primary', id: 'btn-save'
      = link_to 'Cancel', @view_helper[:back_path], class: 'btn-link'

      - if @can_delete
        = confirm_deletion_button @sample_form, 'sample'
