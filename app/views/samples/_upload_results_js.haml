:javascript

    function handleFileSelect(evt) {
        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = window.location.search.substring(1),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
                }
            }
            return false;
        };

        let files = evt.target.files; // FileList object
        
        // use the 1st file from the list
        let f = files[0];

        let reader = new FileReader();

        // Closure to capture the file information.
        reader.onload = (function(f) {
            return async(e) => {
                var text =  e.target.result
                var lines = text.split(/\r\n|\r|\n/); // tolerate both Windows and Unix linebreaks
                var samples_param = []
                var samples = []
                lines.forEach(function(line) { 
                    if (line != ''){
                        samples_param.push( 'uuids[]=' + line.split(',')[0] );
                        samples.push( line.split(',')[0] );
                    } 
                });
                
                var context = getUrlParameter('context');

                var url = '/samples/existing_uuids?context='+context+"&"+samples_param.join("&")
                var found = await fetch(url)
                    .then((response) => response.json())
                    .then((r) => {
                        return r.message;
                })
                var not_found = samples.filter(function(x) {
                    return found.indexOf(x) < 0;
                });
                var upload_info = "<div class='batches-samples'>";
                upload_info += "<div class='samples-row'>"
                upload_info += `<div class='samples-item'>${f.name}</div>`;
                upload_info += (found.length == samples.length) ? 
                    `<div class="samples-row-action">(${samples.length} Samples)</div>` :
                    `<div class="samples-row-action ttip input-required" 
                          id="not_found_mess_${evt.target.nowParam}" 
                          title="${not_found.join('\n')}"
                          >
                        (${samples.length} Samples, ${(samples.length-found.length)} not found) 
                        <div class="icon-alert icon-red"></div>
                    </div>` 
                upload_info += "</div>";
                upload_info += "</div>";

                $(document).on("mouseover", `#not_found_mess_${evt.target.nowParam}`, function(e) {
                    $(`#not_found_mess_${evt.target.nowParam}`)
                        .append(`<span class="ttext" style='color:red; width: 200px;' >${not_found.join("<br>")}</span>`);
                })

                $(document).on("mouseleave", `#not_found_mess_${evt.target.nowParam}`, function(e) {
                    $(`#not_found_mess_${evt.target.nowParam}`)
                        .find(".ttext").remove();
                })

                $('#uploaded-files').append(upload_info);
            }
        })(f);

        reader.readAsText(f);
    }

    $("#add-results-file").on('click', function (e) {
        var now = Date.now()
        var new_file = $('<div>', { id: `upload_info_${now}` })
          .append($('<input>', {
            type: 'file',
            name: `csv_file_${now}`,
            id: `csv_file_${now}`,
            accept: `text/csv`,
            hidden: `true`
          }));

        $('#uploaded-files').append(new_file);

        document.getElementById(`csv_file_${now}`).nowParam = now;
        document.getElementById(`csv_file_${now}`).addEventListener('change', handleFileSelect, false);
        document.getElementById(`csv_file_${now}`).click();

    })

    
