
%template{:id => "csvFileRow"}
  .list-items.upload_info
    .items-row
      .items-item.gap-5
        .icon-circle-minus.icon-gray.remove_file
        .file-name
      .items-row-action.gap-5.not_found_message
        .uploaded-samples-count
        .upload-icon.bigger
        .ttext.not-found-uuids.hidden

%template{:id => "csvInputFile"}
  = file_field_tag "box[csv_box]", hidden: true, class: "csv_file", accept: "text/csv"

:javascript
  var getUrlParameter = function getUrlParameter(sParam) {
      var sPageURL = window.location.search.substring(1),
          sURLVariables = sPageURL.split('&'),
          sParameterName,
          i;

      for (i = 0; i < sURLVariables.length; i++) {
          sParameterName = sURLVariables[i].split('=');

          if (sParameterName[0] === sParam) {
              return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
          }
      }
      return false;
  };

  var context = getUrlParameter('context');
  var isUUID = function(str) {
    const regexExp = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/gi;
    return regexExp.test(str);
  };

  var showToolTip = function(evt) {
    var tooltip = evt.currentTarget.tooltip
    if (tooltip.classList.contains("hidden")) {
        tooltip.classList.remove("hidden")
        setTimeout(() => tooltip.classList.add("hidden"), 5000)
    }
    else {
        tooltip.classList.toggle("hidden")
    }
  }

  // Add file button behaviour
  async function handleFileSelect(evt) {
    const file = evt.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append("csv_file", file);

    document.querySelector("#validating-spinner").classList.remove("hidden");
    document.querySelector("#csv-file-error").classList.add("hidden");

    try {
      const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
      const response = await fetch("#{csv_validation_path(@navigation_context.uuid)}", {
        method: "POST",
        headers: {
          "X-CSRF-Token": csrfToken
        },
        body: formData
      });

      if (response.ok) {
      const response_json = (await response.json())
      const found_batches = response_json.found_batches;
      const not_found_batches = response_json.not_found_batches;
      const batches_nbr = response_json.batches_nbr;

      // Create row from template with filename and upload info
      var template = document.getElementById(`csvFileRow`).content;
      var fragment = template.cloneNode(true);

      fragment.querySelector(`.uploaded-samples-count`).textContent = `${batches_nbr} Samples ` ;
      fragment.querySelector(`.upload-icon`).classList.add(`icon-checkmark`)
      fragment.querySelector(`.file-name`).textContent = `${file.name}`;

      // Bind click event to remove button
      var removeFileRow = function(evt) {
          evt.currentTarget.upload_info.remove();
          document.getElementById(`add-box-file`).style.display = 'block';
      }
      fragment.querySelector(".remove_file").upload_info = fragment.querySelector(`.upload_info`)
      fragment.querySelector(".remove_file").addEventListener('click', removeFileRow, false)

      // Add tooltip to display not found batches
      if (not_found_batches.length > 0) {
        fragment.querySelector(`.uploaded-samples-count`).innerHTML += `(<span class="dashed-underline">${(not_found_batches.length)} batch${(not_found_batches.length>1?'es':'')}</span> not found) `
        fragment.querySelector(`.upload-icon`).classList.add(`icon-alert`,`icon-red`)
        fragment.querySelector(`.items-row-action`).classList.add(`ttip`,`input-required`)

        // Add mouse behaviour to display tooltip
        var ttext = fragment.querySelector(".ttext")
        ttext.innerHTML = Array.from(not_found_batches).slice(0,5).join("<br>")

        fragment.querySelector(".not_found_message").tooltip = ttext
        fragment.querySelector(".not_found_message").addEventListener('click', showToolTip, false )
      } else {
        fragment.querySelector(`.upload-icon`).classList.add(`icon-check`)
        fragment.querySelector(`.ttext`).remove()
      }

      document.getElementById(`uploaded-files`).append(fragment);
      document.getElementById(`add-box-file`).style.display = 'none';
      document.getElementById(`csv-file-error`).classList.add(`hidden`);

      } else {
      console.log("error")
        document.querySelector("#csv-file-error").classList.remove("hidden");
        document.querySelector("#csv-file-error").innerHTML = validationMessage;
      }
    } catch (error) {
    console.log(error)
      // Handle network or server error
      console.error("An error occurred during the transaction");
    } finally {
      // Hide spinner
      document.querySelector("#validating-spinner").classList.add("hidden");
    }
  }
