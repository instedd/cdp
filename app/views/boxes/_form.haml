= cdx_form_for(@box_form) do |f|
  .row
    .col
      .row.form-field
        .col.form-field__label
          %label Purpose
        .col
          = cdx_select form: f, name: :purpose, searchable: false, :class => 'input-large' do |select|
            - select.items Box.purposes

      = f.form_field :media do
        = cdx_select form: f, name: :media, searchable: false, class: "input-large" do |select|
          - select.items Sample.media

      .row.form-field
        .col.form-field__label
          %label Samples
        .col.radiotoggle
          = f.radio_button :samples, "add_batch"
          = f.label :samples, "Create new samples", value: "add_batch"
          = f.radio_button :samples, "add_samples"
          = f.label :samples, "Select samples from inventory", value: "add_samples"

      .row.form-field
        .col.form-field__label
          %label Contents
        .col
          %fieldset#add_batch{ :disabled => "true", :style => "display: none" }
            = react_component "BatchesSelector", { url: autocomplete_batches_path(format: "json", context: params[:context]),
              name: "box[batch_uuids]", placeholder: "Enter batch id", className: "input-block",
              batches: [] }

          %fieldset#add_samples{ :disabled => "true", :style => "display: none" }
            = react_component "SamplesSelector", { url: autocomplete_samples_path(format: "json", context: params[:context], qc: 0),
              name: "box[sample_uuids]", placeholder: "Enter sample id", className: "input-block",
              samples: samples_data(@box_form.samples) }

  .row
    .col
      = f.check_box :blinded
      = f.label :blinded, "Blind samples (you'll be able to unblind them later from transfer details)"

  = f.form_actions do
    = f.submit 'Save', class: 'btn-primary', id: 'btn-save'
    = link_to 'Cancel', boxes_path, class: 'btn-link'

.sample-source-change-modal-container.hidden
  = react_component("ConfirmationModal", 
                      deletion: true,
                      cancelFunction: "cancelSampleSourceChange",
                      confirmFunction: "confirmSampleSourceChange", 
                      id: "sample-source-confirmation-modal", 
                      colorClass: "red", 
                      confirmMessage: "Continue", 
                      title: "Warning", 
                      message: "If you change the sample source, the box contents will be emptied. ")

:javascript
  
  var confirmSampleSourceChange = function() {}
  var cancelSampleSourceChange = function() {}

  var sourcesRadio = document.querySelectorAll(".radiotoggle input");
  var oldSource = null;

  var applySampleSourceChange = function (displayField) {
    // Hide all the fields and disable them
    sourcesRadio.forEach(function(otherRadio) {
      document.querySelector(`#${otherRadio.value}`).style.display = 'none';
      document.querySelector(`#${otherRadio.value}`).setAttribute("disabled", true);
    });
    // Show the selected field and enable it
    document.querySelector(`#${displayField.value}`).style.display = 'block';
    document.querySelector(`#${displayField.value}`).removeAttribute("disabled");
    // Clear the selectors contents
    document.querySelector(".clear-batches").click()
    document.querySelector(".clear-samples").click()
  }

  sourcesRadio.forEach(function(radio) {
    radio.addEventListener("change", function(evt) {
      var thisField = this;

      confirmSampleSourceChange = function() {
        applySampleSourceChange(thisField);
        document.querySelector(`.sample-source-change-modal-container`).style.visibility = 'hidden';
        // Update the old source only if the user confirmed the change
        oldSource = thisField;
      }
      
      cancelSampleSourceChange = function() {
        document.querySelector(`.sample-source-change-modal-container`).style.visibility = 'hidden';
        // Check back the old source since it was not changed
        oldSource.checked = true;
      }

      if (oldSource) {
        // If the user changed the source, show the modal
        document.querySelector(`.sample-source-change-modal-container`).style.visibility = 'visible';
      } else {
        // For the first time, simulate that the user clicked on the confirm button
        confirmSampleSourceChange();
      }
    });
  });

