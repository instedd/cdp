= cdx_form_for(@box_form) do |f|
  .row
    .col
      .row.form-field
        .col.form-field__label
          %label Purpose
        .col
          = cdx_select form: f, name: :purpose, searchable: false, :class => 'input-large' do |select|
            - select.items Box.purposes

      = f.form_field :media do
        = cdx_select form: f, name: :media, searchable: false, class: "input-large" do |select|
          - select.items Sample.media

      .row.form-field
        .col.form-field__label
          %label Samples
        .col.radiotoggle
          = f.radio_button :samples, "add_batch"
          = f.label :samples, "Create new samples", value: "add_batch"
          = f.radio_button :samples, "add_samples"
          = f.label :samples, "Select samples from inventory", value: "add_samples"

      .row.form-field
        .col.form-field__label
          %label Contents
        .col
          %fieldset#add_batch{ :disabled => "true", :style => "display: none" }
            = react_component "BatchesSelector", { url: autocomplete_batches_path(format: "json", context: params[:context]),
              name: "box[batch_uuids]", placeholder: "Enter batch id", className: "input-block",
              batches: [] }

          %fieldset#add_samples{ :disabled => "true", :style => "display: none" }
            = react_component "SamplesSelector", { url: autocomplete_samples_path(format: "json", context: params[:context], qc: 0),
              name: "box[sample_uuids]", placeholder: "Enter sample id", className: "input-block",
              samples: samples_data(@box_form.samples) }

  .row
    .col
      = f.check_box :blinded
      = f.label :blinded, "Blind samples (you'll be able to unblind them later from transfer details)"

  = f.form_actions do
    = f.submit 'Save', class: 'btn-primary', id: 'btn-save'
    = link_to 'Cancel', boxes_path, class: 'btn-link'

.sample-source-change-modal-container.hidden
  = react_component("ConfirmationModal", 
                      deletion: true,
                      cancelFunction: "cancelSampleSourceChange",
                      confirmFunction: "confirmSampleSourceChange", 
                      id: "sample-source-confirmation-modal", 
                      colorClass: "red", 
                      confirmMessage: "Continue", 
                      title: "Warning", 
                      message: "If you change the sample source, the box contents will be emptied. ")

:javascript
  
  var sourcesRadio = document.querySelectorAll(".radiotoggle input");
  var oldSource = null;
  var confirmSampleSourceChange;

  var applySampleSourceChange = function (displayField) {
    // Hide all the fields and disable them
    sourcesRadio.forEach(function(otherRadio) {
      document.getElementById(otherRadio.value).style.display = 'none';
      document.getElementById(otherRadio.value).setAttribute("disabled", true);
    });
    // Show the selected field and enable it
    document.getElementById(displayField.value).style.display = 'block';
    document.getElementById(displayField.value).removeAttribute("disabled");
    // Clear the selectors contents
    document.querySelector(".clear-batches").click()
    document.querySelector(".clear-samples").click()
  }

  function showConfirmModal() {
    document.querySelector(`.sample-source-change-modal-container`).style.visibility = 'visible';
  }

  function hideConfirmModal() {
    document.querySelector(`.sample-source-change-modal-container`).style.visibility = 'hidden';
  }

  function confirmSampleSourceChangeFn() {
    applySampleSourceChange(this);
    hideConfirmModal();
    // Update the old source only if the user confirmed the change
    oldSource = this;
  }
  function cancelSampleSourceChange() {
    hideConfirmModal();
    // Check back the old source since it was not changed
    oldSource.checked = true;
  }  

  sourcesRadio.forEach(function(radio) {
    radio.addEventListener("change", function(evt) {
      if (oldSource) {
        confirmSampleSourceChange = confirmSampleSourceChangeFn.bind(this)
        showConfirmModal();
      } else {
        // For the first time, simulate that the user clicked on the confirm button
        confirmSampleSourceChangeFn.call(this);
      }
    });
  });